generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  password String

  participants   Participant[]
  justifications Justification[]
  votes          Vote[]
  comments       Comment[]

  @@map("users")
}

model Debate {
  id        String     @id @default(cuid())
  priv      Int
  started   DateTime   @default(now())
  closed    Boolean    @default(false)

  topicId   Int
  topic     Topic      @relation(fields: [topicId], references: [id])

  participants Participant[]

  @@map("debates")
}

model Topic {
  id      Int      @id @default(autoincrement())
  title   String
  stances Stance[]
  debates Debate[]

  @@map("topics")
}

model Stance {
  id             Int             @id @default(autoincrement())
  label          String
  topicId        Int
  topic          Topic           @relation(fields: [topicId], references: [id])
  justifications Justification[]
  participants   Participant[]

  @@map("stances")
}

model Participant {
  id        Int      @id @default(autoincrement())
  userId    String
  debateId  String
  stanceId  Int?

  role      String
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  debate    Debate   @relation(fields: [debateId], references: [id])
  stance    Stance?  @relation(fields: [stanceId], references: [id])

  @@unique([userId, debateId])

  @@map("participants")
}

model Justification {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())

  authorId    String
  author      User     @relation(fields: [authorId], references: [id])

  stanceId    Int
  stance      Stance   @relation(fields: [stanceId], references: [id])

  votes       Vote[]
  comments    Comment[] @relation("JustificationComments")

  @@map("justifications")
}

model Vote {
  id              Int      @id @default(autoincrement())
  value           Int

  userId          String
  user            User     @relation(fields: [userId], references: [id])

  justificationId Int
  justification   Justification @relation(fields: [justificationId], references: [id])

  @@unique([userId, justificationId])

  @@map("votes")
}

model Comment {
  id               Int      @id @default(autoincrement())
  content          String
  createdAt        DateTime @default(now())

  authorId         String
  author           User     @relation(fields: [authorId], references: [id])

  justificationId  Int
  justification    Justification @relation("JustificationComments", fields: [justificationId], references: [id])

  parentId         Int?
  parent           Comment?  @relation("CommentHierarchy", fields: [parentId], references: [id])
  children         Comment[] @relation("CommentHierarchy")

  @@map("comments")
}
